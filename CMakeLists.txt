CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)
PROJECT(QShaderEdit)

SET(QShaderEdit_CMAKE_DIR "${QShaderEdit_SOURCE_DIR}/cmake")
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${QShaderEdit_CMAKE_DIR}")
#SET(CMAKE_BUILD_TYPE Release)

IF(WIN32)
    SET(GLEW_ROOT_DIR "${QShaderEdit_SOURCE_DIR}/extern/glew")
ENDIF(WIN32)

SET(Data_Dir ${QShaderEdit_SOURCE_DIR})

# Qt
SET(QT_MIN_VERSION 4.2.0)
FIND_PACKAGE(Qt4 REQUIRED)
SET(QT_USE_QTOPENGL true)
INCLUDE_DIRECTORIES(${QT_INCLUDE_DIR} ${CMAKE_CURRENT_BINARY_DIR}/src ${CMAKE_CURRENT_BINARY_DIR}/src/completer)
#SET(LIBS ${LIBS} ${QT_QTCORE_LIBRARY_DEBUG} ${QT_QTGUI_LIBRARY_DEBUG} ${QT_QTOPENGL_LIBRARY_DEBUG})
SET(LIBS ${LIBS} ${QT_QTCORE_LIBRARY} ${QT_QTGUI_LIBRARY} ${QT_QTOPENGL_LIBRARY})

# OpenGL
FIND_PACKAGE(OpenGL REQUIRED)
IF(OPENGL_FOUND)
	MESSAGE(STATUS "Looking for OpenGL - found")
	INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_PATH})
	SET(LIBS ${LIBS} ${OPENGL_LIBRARIES})
ELSE(OPENGL_FOUND)
	MESSAGE(SEND_ERROR "Looking for OpenGL - not found")
ENDIF(OPENGL_FOUND)

#GLEW 
FIND_PACKAGE(GLEW REQUIRED)	
IF(FOUND_GLEW)
	MESSAGE(STATUS "Looking for GLEW - found")
	INCLUDE_DIRECTORIES(${GLEW_INCLUDE_PATH})
	SET(LIBS ${LIBS} ${GLEW_LIBRARY})
ELSE(FOUND_GLEW)
	MESSAGE(SEND_ERROR "Looking for GLEW - not found")
ENDIF(FOUND_GLEW)

# Cg
#INCLUDE(${QShaderEdit_CMAKE_DIR}/FindCg.cmake)
#IF(FOUND_CG)
#	MESSAGE(STATUS "Looking for Cg - found")
#	INCLUDE_DIRECTORIES(${CG_INCLUDE_PATH})
#	SET(LIBS ${LIBS} ${CG_LIBRARY} ${CG_GL_LIBRARY})
#ELSE(FOUND_CG)
#	MESSAGE(STATUS "Looking for Cg - not found")
#ENDIF(FOUND_CG)

SUBDIRS(src)
