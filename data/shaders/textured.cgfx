float3 color : DIFFUSE < string SasUiLabel = "Base Color"; > = {1.0f, 0.0f, 0.0f};
float amb < string SasUiLabel = "Ambient"; > = 0.1f;

float4x4 mvp : ModelViewProjection;
float3x3 normalMatrix : ModelViewInverseTranspose;

sampler2D tex;

struct VertexInput {
	float4 position : POSITION;
	float3 normal : NORMAL;
	float2 tex : TEXCOORD0;
};

struct VertexOutput {
	float4 position : POSITION;
	float3 normal : TEXCOORD0;
	float2 tex : TEXCOORD1;
};

VertexOutput vp(VertexInput input)
{
	VertexOutput output;
	output.position = mul(input.position, mvp);
	output.normal = mul(input.normal, normalMatrix);
	output.tex = input.tex;
	return output;
}

float4 fp(VertexOutput input) : COLOR
{
	float3 N = normalize(input.normal);
	float3 L = normalize(gl_LightSource[0].position.xyz);
	float3 H = normalize(gl_LightSource[0].halfVector.xyz);

	float3 texColor = tex2D(tex, input.tex).rgb;
	float3 ambient = texColor * color * amb;
	float3 diffuse = texColor * color * (1.0 - amb) * saturate(dot(L, N));
	float3 specular = pow(saturate(dot(H, N)), 16.0);

	return float4(ambient + diffuse + specular, 1.0);
}

technique main
{
	pass p0
	{
		VertexProgram = compile arbvp1 vp();
		FragmentProgram = compile arbfp1 fp();
		DepthTestEnable = true;
		CullFaceEnable = true;
	}
}
