/* Copyright NVIDIA Corporation 2004
TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, THIS SOFTWARE IS PROVIDED
*AS IS* AND NVIDIA AND ITS SUPPLIERS DISCLAIM ALL WARRANTIES, EITHER EXPRESS
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL NVIDIA OR ITS SUPPLIERS
BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES
WHATSOEVER (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS,
BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER PECUNIARY LOSS)
ARISING OUT OF THE USE OF OR INABILITY TO USE THIS SOFTWARE, EVEN IF NVIDIA HAS
BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.


Comments:
    Mandelbrot set browser using PS_3 branching
	Scene geometry is ignored.
	For more speed, reduce "iterations"
	For more detail, increase "iterations" */

///////////////////////////////////////////////////////////
/////////////////////////////////////// Tweakables ////////
///////////////////////////////////////////////////////////

int iterate <
	float UIMin = 2;
	float UIMax = 200;
> = 50;

float scale <
	string UIWidget = "slider";
	float UIMin = 0.001;
	float UIMax = 3.0;
	float UIStep = 0.001;
> = 0.11f;

float2 center = {0.709f, 0.350f};

float range <
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 0.05;
	float UIStep = 0.001;
	string UIName = "Outer Color Gradation";
> = 0.05f;

float3 InColor <
	string UIWidget = "Color";
	string UIName = "Inside Region";
> = {0,0,0};

float3 OutColorA <
	string UIWidget = "Color";
	string UIName = "Outer Region";
> = {1,0,.3};

float3 OutColorB <
	string UIWidget = "Color";
	string UIName = "Edge Region";
> = {.2,1,0};

float2 viewport : ViewportSize;

float4x4 mv : ModelView;

/////////////////////////////////////////////////////
///////////////////////////////// vertex shader /////
/////////////////////////////////////////////////////

struct VertexInput {
	float4 position : POSITION;
	float2 tex : TEXCOORD0;
};

struct VertexOutput {
	float4 position : POSITION;
	float2 tex : TEXCOORD0;
};

VertexOutput vp(VertexInput input)
{
	VertexOutput output;
	output.position = input.position;
	float3 eye = mv[3].xyz;

	float2 scale2 = -0.15 * eye.z * scale * float2(viewport.x / viewport.y, 1.0);
	output.tex = (input.tex - 0.5) * scale2 - center - eye.xy * float2(0.1, -0.1);

	return output;
}

/////////////////////////////////////////////////////
////////////////////////////////// pixel shader /////
/////////////////////////////////////////////////////

float4 fp(VertexOutput input) : COLOR {
    //float3 c = mandelbrot_color(IN.TexCoord0);
    float2 pos = input.tex;
    float real = input.tex.x;
    float imag = input.tex.y;
    float Creal = real;
    float Cimag = imag;
    float r2 = 0;
    float i;
    for (i=0; (i<iterate) && (r2<4.0); i++) {
		float tempreal = real;
		real = (tempreal*tempreal) - (imag*imag) + Creal;
		imag = 2*tempreal*imag + Cimag;
		r2 = (real*real) + (imag*imag);
    }
    float3 finalColor;
    if (r2 < 4) {
       finalColor = InColor;
    }
	else {
    	finalColor = lerp(OutColorA, OutColorB, frac(i * range));
    }
    return float4(finalColor,1);
}

///////////////////////////////////////////////////////////
/////////////////////////////////////// technique /////////
///////////////////////////////////////////////////////////

technique mandy {
    pass p0 {
		VertexProgram = compile arbvp1 vp();
		FragmentProgram = compile fp40 fp();
    }
}
